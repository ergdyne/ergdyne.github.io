{"version":3,"sources":["display/fields.module.css","mockAPI/citizen.tsx","display/RadioField.tsx","display/CitizenCard.tsx","display/DistrictCitizens.tsx","display/DraftResults.tsx","display/TextField.tsx","display/ScavengerTotals.tsx","functions/randomFromList.tsx","mockAPI/getNames.tsx","mockAPI/createCitizens.tsx","mockAPI/localStorage.tsx","mockAPI/runDraft.tsx","functions/randomSummation.tsx","App.tsx","index.tsx"],"names":["module","exports","container","label","textField","radioNoWrap","radioOption","radioToggle","Position","Assignment","POSITIONS","Center","Generalist","PointGuard","PowerForward","ShootingGuard","SmallForward","POSITION_OPTIONS","filter","x","map","value","MAX_BASKETBALL_APTITUDE","RadioOption","props","option","onChange","onClick","useCallback","selected","react_default","a","createElement","Button","className","fields","disabled","variant","RadioField","options","inline","concat","Fragment","RadioField_RadioOption","key","displayPreferred","position","CitizenCard","citizen","update","updatePosition","assignedPosition","name","assignment","result","basketBallAptitude","preferredPosition","aboutCitizen","display_RadioField","DistrictCitizens","districtNumber","citizens","updateCitizen","i","DraftResults","draftResults","citizenUpdate","TextField","type","ScavengerTotals","values","v","randomFromList","list","Math","floor","random","length","LETTERS","NAMES","getNames","amount","names","Set","size","last","first","charAt","add","Array","from","createCitizens","sorted","arguments","undefined","ceil","Labor","sort","b","SCOUT_NUMBERS","SCOUT_MAX","GOVERNORS","INITIAL_CITIZENS","ADDITIONAL_CITIZENS","GAME_DATA","EMPTY_ROSTER","Map","createAndSetGameData","scoutNumbers","scoutMax","governors","initialCitizens","additionalCitizens","draft","governorCount","citizensPerGovernor","results","push","round","j","runDraft","scavengerNumbers","cards","max","current","randomSummation","extraCitizens","rosters","_","updateGameData","getOrCreateGameData","gameData","localStorage","getItem","JSON","parse","r","Object","entries","resetGameData","tempData","fromEntries","setItem","stringify","district","console","log","roster","oldPlayer","get","Training","set","citizenUpdater","onChangeGameDataBuilder","setValue","updateStore","writeStore","e","target","parsed","Number","isInteger","App","_useState","useState","_useState2","slicedToArray","setDisabled","_useState3","_useState4","setGameData","_useState5","toString","_useState6","setScoutNumbers","_useState7","_useState8","setScoutMax","_useState9","_useState10","setGovernors","_useState11","_useState12","setInitialCitizens","_useState13","_useState14","setAdditionalCitizens","resetData","updateCitizenData","updateData","changeScoutNumbers","changeScoutMax","changeGovernors","changeInitialCitizens","changeAdditionalCitizens","display_TextField","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f345177d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"fields_container__1E8Zb\",\"label\":\"fields_label__2ZHJD\",\"textField\":\"fields_textField__1EM4s\",\"radioNoWrap\":\"fields_radioNoWrap__GwVEq\",\"radioOption\":\"fields_radioOption__2P4VG\",\"radioToggle\":\"fields_radioToggle__2L57R\"};","\nimport Option from \"../types/Option\"\n\nexport enum Position {\n  PointGuard = 'Point Guard',\n  ShootingGuard = 'Shooting Guard',\n  SmallForward = 'Small Forward',\n  PowerForward = 'Power Forward',\n  Center = 'Center',\n  Generalist = 'Generalist',\n}\n\nexport const POSITIONS: Position[] = [\n  Position.Center,\n  Position.Generalist,\n  Position.PointGuard,\n  Position.PowerForward,\n  Position.ShootingGuard,\n  Position.SmallForward,\n]\n\nexport const POSITION_OPTIONS: Option[] = POSITIONS.filter(\n  x => x !== Position.Generalist\n).map(x => { return { label: x, value: x } })\n\nexport enum Assignment {\n  Labor = 'Labor',\n  Scavenger = 'Scavenger',\n  Training = 'Training',\n}\n\nexport const MAX_BASKETBALL_APTITUDE = 100\n\nexport interface Citizen {\n  name: String\n  preferredPosition: Position\n  basketBallAptitude: number\n  assignment: Assignment\n  assignedPosition?: Position\n  //Store other information such as injury and current skill and UID\n}\n","import React, { useCallback } from \"react\"\nimport Button from 'react-bootstrap/Button'\nimport Option from \"../types/Option\"\nimport fields from \"./fields.module.css\"\n\ninterface OptionProps {\n  option: Option\n  onChange: (value: string | number) => void\n  value?: string\n}\n\n\ninterface Props {\n  options: Option[]\n  onChange: (value: string | number) => void\n  disabled?: boolean\n  label?: string\n  inline?: boolean\n  value?: string\n}\n\nconst RadioOption = (props: OptionProps): JSX.Element => {\n  const { option, value, onChange } = props\n  const onClick = useCallback(() => { onChange(option.value) }, [option, onChange])\n  const selected = option.value === value\n\n  return (\n    <Button\n      className={fields.radioToggle}\n      onClick={onClick}\n      disabled={selected}\n      variant={selected ? \"light\" : \"dark\"}\n    >\n      {option.label}  \n    </Button>\n  )\n}\n\nconst RadioField = (props: Props): JSX.Element => {\n  const { value, options, onChange, disabled, label, inline } = props\n  return (\n    <div className={`${fields.container} ${inline ? fields.radioNoWrap : ''}`}>\n      {label ? <div className={fields.label}>{label}</div> : <></>}\n      { options.map(option => <RadioOption\n          key={option.value}\n          option={option}\n          value={value}\n          onChange={onChange}\n        />)\n      }\n    </div>\n  )\n\n}\n\nexport default RadioField\n","import React, { useCallback } from 'react'\nimport {\n  Citizen,\n  Position,\n  MAX_BASKETBALL_APTITUDE,\n  POSITION_OPTIONS,\n} from '../mockAPI/citizen'\nimport RadioField from './RadioField'\n\ninterface Props {\n  citizen: Citizen\n  disabled: boolean\n  update?: (c: Citizen) => void\n}\n\nfunction displayPreferred(position: Position): string {\n  return (position == Position.Generalist) ? 'any position' : position\n}\n\nfunction aboutCitizen(citizen: Citizen): string {\n  let result = `Basketball aptitude of ${citizen.basketBallAptitude}. `\n  \n  if (citizen.assignedPosition) {\n    result = result + `They are playing ${citizen.assignedPosition}, `\n    if (\n      citizen.assignedPosition == citizen.preferredPosition ||\n      citizen.preferredPosition == Position.Generalist\n    ) {\n      result = result + 'and '\n    } else {\n      result = result + 'but '\n    }\n    result = result + `they prefer playing ${citizen.preferredPosition}`\n  } else {\n    result = result + `They are currently working in ${citizen.assignment}. `\n    if (citizen.basketBallAptitude > 0.5 * MAX_BASKETBALL_APTITUDE) {\n      result = result +\n        `They would prefer to be playing ${displayPreferred(citizen.preferredPosition)}.`\n    } else {\n      result = result +\n        `They could play ${displayPreferred(citizen.preferredPosition)}, but would rather not.`\n    }\n  }\n  return result\n}\n\nexport default function CitizenCard(props: Props) {\n  const { citizen, update, disabled } = props\n\n  const updatePosition = useCallback((position: string | number) => {\n    citizen.assignedPosition = position as Position\n    if(update) update(citizen)\n  }, [update, citizen])\n\n  return (<div>\n    <h5>{`${citizen.name} - ${citizen.assignment}`}</h5>\n    <p> {aboutCitizen(citizen)} </p>\n    <RadioField\n      options={POSITION_OPTIONS}\n      onChange={updatePosition}\n      disabled={disabled}\n      inline={true}\n      value={citizen.assignedPosition}\n    />\n  </div>)\n}\n","import React from 'react'\nimport { Citizen } from '../mockAPI/citizen'\nimport CitizenCard from './CitizenCard'\n\ninterface Props {\n  citizens: Citizen[]\n  updateCitizen?: (c: Citizen) => void\n  districtNumber?: number\n  disabled?: boolean\n}\n\nexport default function DistrictCitizens(props: Props) {\n  const { districtNumber, citizens, updateCitizen, disabled } = props\n  return (<div>\n    <br/>\n    {(districtNumber) ? <h4>{`District ${districtNumber}`}</h4> : <div/>}\n    {citizens.map((citizen, i) => <CitizenCard\n        key={i}\n        citizen={citizen}\n        update={updateCitizen}\n        disabled={disabled || !updateCitizen}\n      />\n    )}\n  </div>)\n}\n","import React, { useCallback } from 'react'\nimport { Citizen } from '../mockAPI/citizen'\nimport DistrictCitizens from './DistrictCitizens'\n\ninterface Props {\n  draftResults: Citizen[][]\n  updateCitizen: (district: number, citizen: Citizen) => void\n  disabled: boolean\n}\n\nexport default function DraftResults(props: Props) {\n  const { draftResults, updateCitizen, disabled } = props\n  return (<div>\n    { draftResults.map((citizens, i) => {\n        const citizenUpdate = useCallback(\n          (citizen: Citizen) => { updateCitizen(i, citizen) },\n          [citizens, i]\n        )\n        return (\n          <DistrictCitizens\n            key = {i}\n            citizens = {citizens}\n            districtNumber = {i + 137}\n            updateCitizen={citizenUpdate}\n            disabled={disabled}\n          />\n        )\n      })\n    }\n  </div>)\n}\n","import React from \"react\"\n\nimport fields from \"./fields.module.css\"\n\ninterface Props {\n  label: string\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  disabled?: boolean\n}\n\nconst TextField = (props: Props): JSX.Element => {\n  const { label, value, disabled, onChange } = props\n  return (\n    <div className={fields.container}>\n      <div className={fields.label}>{label}</div>\n      <input\n        type=\"text\"\n        className={fields.textField}\n        disabled={disabled}\n        value={value}\n        onChange={onChange}/>\n    </div>\n  )\n}\n\nexport default TextField\n","import React from 'react'\nimport Button from 'react-bootstrap/Button'\n\n\ninterface Props {\n  values: number[]\n}\n\nexport default function ScavengerTotals(props: Props){\n  const { values } = props\n  return (\n    <div>\n      {\n        values.map((v, i) => <Button key={i} variant={(i%2 == 0) ? \"light\" : \"dark\"}> { v } </Button>)\n\n      }\n    </div>\n  )\n}\n","export default function randomFromList<Type>(list: Type[]): Type {\n  return list[Math.floor(Math.random() * list.length)]\n}\n","import randomFromList from \"../functions/randomFromList\"\n\nconst LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nfunction getNames(amount: number): string[]{\n  const names: Set<string> = new Set()\n\n  while(names.size < amount){\n    const last = randomFromList(NAMES)\n    const first = LETTERS.charAt(Math.floor(Math.random() * LETTERS.length))\n    names.add(`${first}. ${last}`)\n  }\n\n  return Array.from(names)\n}\n\nconst NAMES = [\n\t'SMITH',\n\t'JOHNSON',\n\t'WILLIAMS',\n\t'JONES',\n\t'BROWN',\n\t'DAVIS',\n\t'MILLER',\n\t'WILSON',\n\t'MOORE',\n\t'TAYLOR',\n\t'ANDERSON',\n\t'THOMAS',\n\t'JACKSON',\n\t'WHITE',\n\t'HARRIS',\n\t'MARTIN',\n\t'THOMPSON',\n\t'GARCIA',\n\t'MARTINEZ',\n\t'ROBINSON',\n\t'CLARK',\n\t'RODRIGUEZ',\n\t'LEWIS',\n\t'LEE',\n\t'WALKER',\n\t'HALL',\n\t'ALLEN',\n\t'YOUNG',\n\t'HERNANDEZ',\n\t'KING',\n\t'WRIGHT',\n\t'LOPEZ',\n\t'HILL',\n\t'SCOTT',\n\t'GREEN',\n\t'ADAMS',\n\t'BAKER',\n\t'GONZALEZ',\n\t'NELSON',\n\t'CARTER',\n\t'MITCHELL',\n\t'PEREZ',\n\t'ROBERTS',\n\t'TURNER',\n\t'PHILLIPS',\n\t'CAMPBELL',\n\t'PARKER',\n\t'EVANS',\n\t'EDWARDS',\n\t'COLLINS',\n\t'STEWART',\n\t'SANCHEZ',\n\t'MORRIS',\n\t'ROGERS',\n\t'REED',\n\t'COOK',\n\t'MORGAN',\n\t'BELL',\n\t'MURPHY',\n\t'BAILEY',\n\t'RIVERA',\n\t'COOPER',\n\t'RICHAR',\n]\nexport default getNames\n","import randomFromList from '../functions/randomFromList';\nimport getNames from './getNames';\nimport { Citizen, POSITIONS, MAX_BASKETBALL_APTITUDE, Assignment } from './citizen';\n\nexport default function createCitizens(amount: number, sorted:boolean = true): Citizen[] {\n  //Sorted by basketball Aptitude\n  const citizens: Citizen[] = getNames(amount).map(name => {\n    const citizen: Citizen = {\n      name: name,\n      basketBallAptitude: Math.ceil(Math.random() * MAX_BASKETBALL_APTITUDE),\n      preferredPosition: randomFromList(POSITIONS),\n      assignment: Assignment.Labor,\n    }\n    return citizen\n  })\n  if(sorted) citizens.sort((a, b) => b.basketBallAptitude - a.basketBallAptitude)\n  return citizens\n}\n","import { debug } from \"console\"\nimport randomSummation from \"../functions/randomSummation\"\nimport { Assignment, Citizen, Position } from \"./citizen\"\nimport createCitizens from \"./createCitizens\"\nimport runDraft from \"./runDraft\"\n\nconst SCOUT_NUMBERS = 20\nconst SCOUT_MAX = 40\n\nconst GOVERNORS = 16\nconst INITIAL_CITIZENS = 10\n\nconst ADDITIONAL_CITIZENS = 20\n\nconst GAME_DATA = 'GAME_DATA'\n\nexport const EMPTY_GAME_DATA: GameData = {\n  draft: [[]],\n  rosters: [],\n  scavengerNumbers: [],\n  extraCitizens: [],\n  scoutNumbers: 0,\n  scoutMax: 0,\n  governors: 0,\n  initialCitizens: 0,\n  additionalCitizens: 0,\n}\n\nconst EMPTY_ROSTER: Map<Position, Citizen | null> = new Map<Position, Citizen | null>()\nEMPTY_ROSTER.set(Position.Center, null)\n\n\nexport interface GameData {\n  draft: Citizen[][]\n  rosters: Map<Position, Citizen | null>[]\n  scavengerNumbers: number[]\n  extraCitizens: Citizen[]\n  scoutNumbers: number\n  scoutMax: number\n  governors: number\n  initialCitizens: number\n  additionalCitizens: number\n}\n\nexport function createAndSetGameData(\n  scoutNumbers: number = SCOUT_NUMBERS,\n  scoutMax: number = SCOUT_MAX,\n  governors: number = GOVERNORS,\n  initialCitizens: number = INITIAL_CITIZENS,\n  additionalCitizens: number = ADDITIONAL_CITIZENS,\n): GameData {\n  const draft = runDraft(governors, initialCitizens)\n  const scavengerNumbers = randomSummation(scoutNumbers, scoutMax)\n  const extraCitizens = createCitizens(additionalCitizens, false)\n  const rosters = draft.map( _ => new Map(EMPTY_ROSTER))\n  const gameData: GameData = {\n    draft,\n    rosters,\n    scavengerNumbers,\n    extraCitizens,\n    scoutNumbers,\n    scoutMax,\n    governors,\n    initialCitizens,\n    additionalCitizens\n  }\n  \n  return updateGameData(gameData)\n}\n\nexport function getOrCreateGameData() {\n  const gameData: string | null = localStorage.getItem(GAME_DATA)\n  const result: GameData = gameData ? JSON.parse(gameData) : createAndSetGameData()\n  //convert objects to maps\n  result.rosters = result.rosters.map(r => new Map(Object.entries(r)) as Map<Position, Citizen | null>)\n  return result\n}\n\nexport function resetGameData() {\n  const gameData = getOrCreateGameData()\n  return createAndSetGameData(\n    gameData.scoutNumbers,\n    gameData.scoutMax,\n    gameData.governors,\n    gameData.initialCitizens,\n    gameData.additionalCitizens,\n  )\n}\n\nexport function updateGameData(gameData: GameData): GameData {\n  const tempData: any = gameData\n  //handle conversion to objects\n  tempData.rosters = gameData.rosters.map(r => Object.fromEntries(r))\n  localStorage.setItem(GAME_DATA, JSON.stringify(tempData))\n  //Handle conversion back to map\n  gameData.rosters = gameData.rosters.map(r => new Map(Object.entries(r)) as Map<Position, Citizen | null>)\n  return gameData\n}\n\nfunction citizenUpdater(\n  gameData: GameData,\n  district: number,\n  citizen: Citizen\n): GameData {\n  if (gameData.draft.length <= district) {\n    console.log(\"Error updatePositionAssignment: invalid district \", district, gameData)\n    return gameData\n  }\n  if (!gameData.rosters || gameData.rosters.length <= district) {\n    console.log(\"Error updatePositionAssignment: no rosters\", district, gameData)\n    return gameData\n  }\n  const citizens = gameData.draft[district]\n  const roster = gameData.rosters[district]\n  if (citizen.assignedPosition) {\n    const position = citizen.assignedPosition\n    const oldPlayer = roster.get(position)\n    for(let i = 0; i < citizens.length; i++) {\n      if (oldPlayer) {\n        if (citizens[i].name === oldPlayer.name) {\n          citizens[i].assignedPosition = undefined\n        }\n      }\n      if (citizens[i].name === citizen.name) {\n        citizens[i].assignedPosition = position\n        citizens[i].assignment = Assignment.Training\n      }\n    }\n    roster.set(position, citizen)\n  }\n  return updateGameData(gameData)\n}\n\nexport function updateCitizen(\n  district: number,\n  citizen: Citizen\n): GameData {\n  return citizenUpdater(getOrCreateGameData(), district, citizen)\n}\n","\nimport { Citizen } from \"./citizen\";\nimport createCitizens from \"./createCitizens\";\n\nexport default function runDraft(governorCount: number, citizensPerGovernor: number): Citizen[][]{\n  const citizens = createCitizens(governorCount*citizensPerGovernor)\n  const results: Citizen[][] = []\n  for(let i=0; i<governorCount; i++){\n    results.push([])\n  }\n  let round = 0\n  \n  while (round < citizensPerGovernor) {\n    if (round%2 == 0) {\n      for(let i=0; i<governorCount; i++) {\n        results[i].push(citizens[round*governorCount + i])\n      }\n    } else {\n      let j = 0\n      for(let i=governorCount - 1; i >= 0; i--) {\n        results[i].push(citizens[round*governorCount + j])\n        j++\n      }\n    }\n    round++\n  }\n  return results\n}\n","export default function randomSummation(cards: number, max: number) {\n  const result: number[] = []\n  let current = 0\n  while (result.length < cards) {\n    current = current + Math.ceil(Math.random() * max)\n    result.push(current)\n  }\n  return result\n}\n","import React, { useCallback, useState } from 'react';\nimport Button from 'react-bootstrap/Button'\n\nimport './App.css';\nimport DraftResults from './display/DraftResults';\nimport TextField from './display/TextField';\nimport ScavengerTotals from './display/ScavengerTotals';\nimport {\n  getOrCreateGameData,\n  resetGameData,\n  updateGameData,\n  updateCitizen,\n} from './mockAPI/localStorage';\nimport DistrictCitizens from './display/DistrictCitizens';\nimport { Citizen } from './mockAPI/citizen';\n\n\n//Change these to change output\n\nfunction onChangeGameDataBuilder(\n  value: string,\n  setValue: React.Dispatch<React.SetStateAction<string>>,\n  updateStore: (x: number) => void,\n  writeStore: () => void,\n): ((e: React.ChangeEvent<HTMLInputElement>) => void) {\n  return useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (value !== e.target.value) { setValue(e.target.value) }\n    const parsed = Number(e.target.value)\n    if (Number.isInteger(parsed) && parsed > 0) {\n      updateStore(parsed)\n      writeStore()\n    }\n  }, [value, setValue, updateStore, writeStore])\n}\n\nfunction App() {\n  const [disabled, setDisabled] = useState(false)\n  const [gameData, setGameData] = useState(getOrCreateGameData())\n  const [scoutNumbers, setScoutNumbers] = useState(gameData.scoutNumbers.toString())\n  const [scoutMax, setScoutMax] = useState(gameData.scoutMax.toString())\n  const [governors, setGovernors] = useState(gameData.governors.toString())\n  const [initialCitizens, setInitialCitizens] = useState(gameData.initialCitizens.toString())\n  const [\n    additionalCitizens, setAdditionalCitizens\n  ] = useState(gameData.additionalCitizens.toString())\n\n  const resetData = useCallback(() => {\n    //For when using actual API\n    setDisabled(true)\n    setGameData(resetGameData())\n    setDisabled(false)\n  }, [resetGameData])\n\n  const updateCitizenData = useCallback(\n    (district: number, citizen: Citizen) => {\n      setDisabled(true)\n      setGameData(updateCitizen(district, citizen))\n      setDisabled(false)\n    },\n    [gameData]\n  )\n\n  function updateScoutNumbers(x: number) { gameData.scoutNumbers = x }\n  function updateScoutMax(x: number) { gameData.scoutMax = x }\n  function updateGovernors(x: number) { gameData.governors = x }\n  function updateInitialCitizens(x: number) { gameData.initialCitizens = x }\n  function updateAdditionalCitizens(x: number) { gameData.additionalCitizens = x }\n\n  function updateData(){\n    //For when using actual API\n    setDisabled(true)\n    setGameData(updateGameData(gameData))\n    setDisabled(false)\n  }\n\n  const changeScoutNumbers = onChangeGameDataBuilder(\n    scoutNumbers, setScoutNumbers, updateScoutNumbers, updateData\n  )\n  const changeScoutMax = onChangeGameDataBuilder(\n    scoutMax, setScoutMax, updateScoutMax, updateData\n  )\n  const changeGovernors = onChangeGameDataBuilder(\n    governors, setGovernors, updateGovernors, updateData\n  )\n  const changeInitialCitizens = onChangeGameDataBuilder(\n    initialCitizens, setInitialCitizens, updateInitialCitizens, updateData\n  )\n  const changeAdditionalCitizens = onChangeGameDataBuilder(\n    additionalCitizens, setAdditionalCitizens, updateAdditionalCitizens, updateData\n  )\n\n  return (\n    <div className=\"App\">\n      <Button disabled={disabled} variant='warning' onClick={resetData}>Reset Game</Button>\n      <h3>Configuration</h3>\n      <TextField\n        label={\"Total Scavenger Values\"}\n        value={scoutNumbers}\n        onChange={changeScoutNumbers}\n        disabled={disabled}\n      />\n      <TextField\n        label={\"Max Scavenger Value\"}\n        value={scoutMax}\n        onChange={changeScoutMax}\n        disabled={disabled}\n      />\n      <TextField\n        label={\"Governors\"}\n        value={governors}\n        onChange={changeGovernors}\n        disabled={disabled}\n      />\n      <TextField\n        label={\"Initial Citizens per Governor\"}\n        value={initialCitizens}\n        onChange={changeInitialCitizens}\n        disabled={disabled}\n      />\n      <TextField\n        label={\"Total Additional Citizens\"}\n        value={additionalCitizens}\n        onChange={changeAdditionalCitizens}\n        disabled={disabled}\n      />\n      <h3>Scavenger Values</h3>\n      <ScavengerTotals values={gameData.scavengerNumbers || []} />\n      <br/>\n      <h3>Draft Results</h3>\n      <DraftResults\n        draftResults={gameData.draft}\n        updateCitizen={updateCitizenData}\n        disabled={disabled}\n      />\n\n      <br/>\n      <h3>Additional Citizens</h3>\n      <DistrictCitizens citizens={gameData.extraCitizens}/>\n\n  </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}